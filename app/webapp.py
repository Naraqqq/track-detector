import sys, os
from PIL import Image
import streamlit as st
import pandas as pd
import plotly.express as px
import time

# ==== –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ====
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from inference.predict import load_model, predict_image

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ====
st.set_page_config(page_title="Track Detector", page_icon="üß≠", layout="wide")

st.markdown("""
    <style>
    body {
        background-color: #f9fafc;
        font-family: "Segoe UI", sans-serif;
    }
    .stButton>button {
        border-radius: 10px;
        background-color: #0078ff;
        color: white;
        border: none;
        transition: all 0.2s ease-in-out;
    }
    .stButton>button:hover {
        background-color: #005edb;
        transform: scale(1.02);
    }
    .fade-in {
        animation: fadeIn 1.2s ease-in-out;
    }
    @keyframes fadeIn {
        0% {opacity: 0; transform: translateY(10px);}
        100% {opacity: 1; transform: translateY(0);}
    }
    .title {
        text-align: center;
        color: #1f1f1f;
    }
    .footer {
        text-align: center;
        color: #777;
        margin-top: 40px;
        font-size: 0.9em;
    }
    </style>
""", unsafe_allow_html=True)

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====
MODEL_PATH = "model/efficientnet_model.pth"
CLASS_NAMES = ['Bear', 'Bird', 'Cat', 'Dog', 'Leopard', 'Otter']


# ==== –ö—ç—à–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å ====
@st.cache_resource
def get_model():
    return load_model(MODEL_PATH)


model = get_model()

# ==== –ù–∞–≤–∏–≥–∞—Ü–∏—è ====
st.sidebar.title("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", ["üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚ÑπÔ∏è –û –º–æ–¥–µ–ª–∏"])

# ==== –°–æ—Å—Ç–æ—è–Ω–∏–µ ====
if "history" not in st.session_state:
    st.session_state["history"] = []

if page == "üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.markdown("<h2 class='title'>üß≠ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–ª–µ–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö</h2>", unsafe_allow_html=True)
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏ –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫–æ–º—É –∂–∏–≤–æ—Ç–Ω–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Å–ª–µ–¥—ã.")

    uploaded_files = st.file_uploader(
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True
    )

    if uploaded_files:
        if st.button("üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
            for uploaded_file in uploaded_files:
                image = Image.open(uploaded_file).convert("RGB")
                with st.spinner(f"–ê–Ω–∞–ª–∏–∑ {uploaded_file.name}..."):
                    time.sleep(0.5)
                    label, probs = predict_image(model, image, CLASS_NAMES)
                color = "green"

                st.markdown(f"""
                <div class='fade-in' style='
                    border: 1px solid #ddd;
                    border-radius: 15px;
                    padding: 10px 20px;
                    background-color: #fff;
                    margin-bottom: 20px;
                    box-shadow: 0 3px 10px rgba(0,0,0,0.05);
                    transition: all 0.3s ease-in-out;
                '>
                    <h4 style='color:{color}; margin-bottom:5px;'>üì∑ {uploaded_file.name}</h4>
                    <p style='font-size:1.1em;'>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: <b>{label}</b>)</p>
                </div>
                """, unsafe_allow_html=True)

                st.image(image, caption=f"{label}", use_container_width=True)

                # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                fig = px.bar(
                    x=CLASS_NAMES, y=probs, color=CLASS_NAMES,
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è {uploaded_file.name}",
                    labels={"x": "–ö–ª–∞—Å—Å", "y": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"}
                )
                st.plotly_chart(fig, use_container_width=True)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state["history"].append({
                    "filename": uploaded_file.name,
                    "label": label,
                    "probs": probs
                })

        if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state["history"] = []


elif page == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.markdown("<h2 class='title'>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</h2>", unsafe_allow_html=True)

    if not st.session_state["history"]:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–¥–µ–ª–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.")
    else:
        df = pd.DataFrame(st.session_state["history"])
        summary = df["label"].value_counts().reset_index()
        summary.columns = ["–ö–ª–∞—Å—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]

        st.subheader("üìà –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
        fig = px.bar(summary, x="–ö–ª–∞—Å—Å", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", color="–ö–ª–∞—Å—Å", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        st.plotly_chart(fig, use_container_width=True)

        st.subheader("üïì –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        for item in st.session_state["history"][-5:][::-1]:
            st.write(f"üì∑ {item['filename']} ‚Üí {item['label']}")

elif page == "‚ÑπÔ∏è –û –º–æ–¥–µ–ª–∏":
    st.markdown("<h2 class='title'>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏</h2>", unsafe_allow_html=True)

    st.write("""
    –ú–æ–¥–µ–ª—å: EfficientNet-B4, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ —Å–≤–æ–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

    –ö–ª–∞—Å—Å—ã: 6 (Bear, Bird, Cat, Dog, Leopard, Otter)  

    –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–µ—Å–æ–≤: [ü§ó Hugging Face](https://huggingface.co/VladimirFireBall/efficientnet-steps)
    """)

    st.markdown("<div class='footer'>¬© 2025 Track Detector | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π ptp2025</div>",
                unsafe_allow_html=True)